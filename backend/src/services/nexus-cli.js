const { exec, spawn } = require('child_process');
const { promisify } = require('util');
const config = require('../../config');

const execAsync = promisify(exec);

class NexusCLI {
  constructor() {
    this.cliPath = config.nexus.cliPath;
    this.runningNodes = new Map(); // –ö–∞—Ä—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Nexus CLI
   */
  async checkCLIAvailability() {
    try {
      const { stdout } = await execAsync(`${this.cliPath} --version`);
      return {
        available: true,
        version: stdout.trim()
      };
    } catch (error) {
      return {
        available: false,
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —É–∑–ª–∞
   */
  async startNode(proverId, options = {}) {
    try {
      console.log(`üöÄ Starting node ${proverId}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É —Å node-id
      const nodeProcess = spawn(this.cliPath, ['start', '--node-id', proverId], {
        stdio: ['pipe', 'pipe', 'pipe'],
        detached: true, // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        cwd: process.cwd()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      this.runningNodes.set(proverId, nodeProcess);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
      nodeProcess.stdout.on('data', (data) => {
        console.log(`[${proverId}] ${data.toString()}`);
      });

      nodeProcess.stderr.on('data', (data) => {
        console.error(`[${proverId}] ERROR: ${data.toString()}`);
      });

      nodeProcess.on('exit', (code) => {
        console.log(`[${proverId}] Process exited with code ${code}`);
        this.runningNodes.delete(proverId);
      });

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
      await new Promise(resolve => setTimeout(resolve, 2000));

      return {
        success: true,
        pid: nodeProcess.pid,
        message: 'Node started successfully'
      };

    } catch (error) {
      console.error(`‚ùå Failed to start node ${proverId}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∑–ª–∞
   */
  async stopNode(proverId) {
    try {
      console.log(`üõë Stopping node ${proverId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤ –ø–∞–º—è—Ç–∏
      const nodeProcess = this.runningNodes.get(proverId);
      if (nodeProcess) {
        nodeProcess.kill('SIGTERM');
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        await new Promise((resolve) => {
          nodeProcess.on('exit', resolve);
          setTimeout(() => {
            if (!nodeProcess.killed) {
              nodeProcess.kill('SIGKILL');
            }
            resolve();
          }, 5000);
        });

        this.runningNodes.delete(proverId);
        return { success: true, message: 'Node stopped successfully' };
      }

      // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏, –∏—â–µ–º –∏ —É–±–∏–≤–∞–µ–º –¥–µ–º–æ–Ω nexus
      const { exec } = require('child_process');
      return new Promise((resolve) => {
        exec(`pkill -f "nexus"`, (error) => {
          if (error && error.code !== 1) { // code 1 = no processes found
            console.error(`‚ùå Failed to stop node ${proverId}:`, error);
            resolve({ success: false, error: error.message });
          } else {
            resolve({ success: true, message: 'Node stopped successfully' });
          }
        });
      });

    } catch (error) {
      console.error(`‚ùå Failed to stop node ${proverId}:`, error);
      return { success: false, error: error.message };
    }
  }

    /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–∞
   */
  async getNodeStatus(proverId) {
    try {
      console.log(`üîç Checking status for node ${proverId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤ –ø–∞–º—è—Ç–∏
      const nodeProcess = this.runningNodes.get(proverId);
      if (nodeProcess && !nodeProcess.killed) {
        return {
          success: true,
          status: {
            status: 'running',
            uptime: 'active',
            tasks_completed: 0,
            nex_points: 0
          },
          raw_output: 'Node is running (in memory)'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ ps –∫–æ–º–∞–Ω–¥—É - –∏—â–µ–º –¥–µ–º–æ–Ω –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å nexus
      const { exec } = require('child_process');
      return new Promise((resolve) => {
        // –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã nexus, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º node-id
        exec(`ps aux | grep -E "(nexus|prover)" | grep -v grep`, (error, stdout) => {
          if (stdout.trim()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã nexus, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            resolve({
              success: true,
              status: {
                status: 'running',
                uptime: 'active',
                tasks_completed: 0,
                nex_points: 0
              },
              raw_output: stdout
            });
          } else {
            resolve({
              success: true,
              status: {
                status: 'stopped',
                uptime: '0',
                tasks_completed: 0,
                nex_points: 0
              },
              raw_output: 'Node is not running'
            });
          }
        });
      });

    } catch (error) {
      console.error(`‚ùå Error checking status for node ${proverId}:`, error);
      return {
        success: false,
        error: error.message,
        status: 'error'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async getNodeMetrics(proverId) {
    try {
      console.log(`üìä Getting metrics for node ${proverId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã
      const status = await this.getNodeStatus(proverId);
      
      // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
      const metrics = {
        status: status.success ? status.status.status : 'unknown',
        uptime: status.success ? status.status.uptime : '0',
        tasks_completed: status.success ? status.status.tasks_completed : 0,
        nex_points: status.success ? status.status.nex_points : 0,
        last_check: new Date().toISOString()
      };
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ CLI
      try {
        const { exec } = require('child_process');
        const { stdout } = await new Promise((resolve, reject) => {
          exec(`${this.cliPath} --help`, (error, stdout) => {
            if (error) reject(error);
            else resolve({ stdout });
          });
        });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ metrics, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if (stdout.includes('metrics')) {
          const { stdout: metricsOutput } = await new Promise((resolve, reject) => {
            exec(`${this.cliPath} metrics --node-id ${proverId}`, (error, stdout) => {
              if (error) reject(error);
              else resolve({ stdout });
            });
          });
          
          const parsedMetrics = this.parseMetricsOutput(metricsOutput);
          Object.assign(metrics, parsedMetrics);
        }
      } catch (cliError) {
        console.log(`‚ö†Ô∏è CLI metrics not available for node ${proverId}:`, cliError.message);
      }
      
      return {
        success: true,
        metrics: metrics,
        raw_output: 'Metrics generated from node status'
      };
    } catch (error) {
      console.error(`‚ùå Error getting metrics for node ${proverId}:`, error);
      return {
        success: false,
        error: error.message,
        metrics: null
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∑–ª–∞
   */
  async updateNodeConfig(proverId, config) {
    try {
      const configStr = JSON.stringify(config);
      const { stdout } = await execAsync(`${this.cliPath} node config --prover-id ${proverId} --config '${configStr}'`);
      
      return {
        success: true,
        message: 'Configuration updated successfully',
        output: stdout
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —É–∑–ª–∞
   */
  async getNodeLogs(proverId, lines = 100) {
    try {
      const { stdout } = await execAsync(`${this.cliPath} logs --node-id ${proverId} --lines ${lines}`);
      
      return {
        success: true,
        logs: stdout.split('\n').filter(line => line.trim())
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        logs: []
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
   */
  getRunningNodes() {
    const nodes = [];
    for (const [proverId, process] of this.runningNodes) {
      nodes.push({
        prover_id: proverId,
        pid: process.pid,
        status: process.killed ? 'stopped' : 'running'
      });
    }
    return nodes;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
   */
  buildStartCommand(proverId, options = {}) {
    let command = `${this.cliPath} node start --prover-id ${proverId}`;
    
    if (options.config) {
      command += ` --config '${JSON.stringify(options.config)}'`;
    }
    
    if (options.logLevel) {
      command += ` --log-level ${options.logLevel}`;
    }
    
    if (options.workers) {
      command += ` --workers ${options.workers}`;
    }
    
    return command;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  parseStatusOutput(output) {
    const lines = output.split('\n');
    const status = {};
    
    for (const line of lines) {
      if (line.includes('Status:')) {
        status.status = line.split(':')[1].trim().toLowerCase();
      } else if (line.includes('Uptime:')) {
        status.uptime = line.split(':')[1].trim();
      } else if (line.includes('Tasks:')) {
        status.tasks_completed = parseInt(line.split(':')[1].trim()) || 0;
      } else if (line.includes('Points:')) {
        status.nex_points = parseInt(line.split(':')[1].trim()) || 0;
      }
    }
    
    return status;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –º–µ—Ç—Ä–∏–∫
   */
  parseMetricsOutput(output) {
    const lines = output.split('\n');
    const metrics = {};
    
    for (const line of lines) {
      if (line.includes('CPU:')) {
        metrics.cpu_usage = parseFloat(line.split(':')[1].replace('%', '').trim()) || 0;
      } else if (line.includes('Memory:')) {
        metrics.memory_usage = parseFloat(line.split(':')[1].replace('%', '').trim()) || 0;
      } else if (line.includes('Network:')) {
        metrics.network_usage = line.split(':')[1].trim();
      } else if (line.includes('Block Height:')) {
        metrics.block_height = parseInt(line.split(':')[1].trim()) || 0;
      }
    }
    
    return metrics;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–æ–¥
   */
  async listNodes() {
    try {
      const { stdout } = await execAsync(`${this.cliPath} list`);
      
      return {
        success: true,
        nodes: this.parseListOutput(stdout)
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        nodes: []
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã
   */
  async createNode(nodeId, config = {}) {
    try {
      const configStr = JSON.stringify(config);
      const { stdout } = await execAsync(`${this.cliPath} create --node-id ${nodeId} --config '${configStr}'`);
      
      return {
        success: true,
        message: 'Node created successfully',
        output: stdout
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
   */
  async deleteNode(nodeId) {
    try {
      const { stdout } = await execAsync(`${this.cliPath} delete --node-id ${nodeId}`);
      
      return {
        success: true,
        message: 'Node deleted successfully',
        output: stdout
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ
   */
  async getNodeInfo(nodeId) {
    try {
      const { stdout } = await execAsync(`${this.cliPath} info --node-id ${nodeId}`);
      
      return {
        success: true,
        info: this.parseInfoOutput(stdout)
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        info: null
      };
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã list
   */
  parseListOutput(output) {
    const lines = output.split('\n').filter(line => line.trim());
    const nodes = [];
    
    for (const line of lines) {
      // –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞: "node_123 (running) - 127.0.0.1:8080"
      const match = line.match(/^(\w+)\s+\((\w+)\)\s*-\s*(.+)$/);
      if (match) {
        nodes.push({
          id: match[1],
          status: match[2],
          address: match[3]
        });
      }
    }
    
    return nodes;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã info
   */
  parseInfoOutput(output) {
    const lines = output.split('\n').filter(line => line.trim());
    const info = {};
    
    for (const line of lines) {
      const [key, value] = line.split(':').map(s => s.trim());
      if (key && value) {
        info[key.toLowerCase().replace(/\s+/g, '_')] = value;
      }
    }
    
    return info;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    for (const [proverId, process] of this.runningNodes) {
      try {
        process.kill('SIGTERM');
        console.log(`üõë Stopped node ${proverId}`);
      } catch (error) {
        console.error(`‚ùå Failed to stop node ${proverId}:`, error);
      }
    }
    this.runningNodes.clear();
  }
}

module.exports = NexusCLI; 