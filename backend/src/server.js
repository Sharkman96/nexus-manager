const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');
const WebSocket = require('ws');
const http = require('http');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
const config = require('../config');
const Database = require('./database/db');
const DatabaseMigration = require('./database/migrate');
const DockerMigration = require('./database/migrate-docker');
const NexusCLI = require('./services/nexus-cli');
const NexusDocker = require('./services/nexus-docker');
const NexusRPC = require('./services/nexus-rpc');
const SystemMonitor = require('./services/system-monitor');

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
const nodeRoutes = require('./routes/nodes');
const dockerRoutes = require('./routes/docker');
const metricsRoutes = require('./routes/metrics');
const systemRoutes = require('./routes/system');
const notificationRoutes = require('./routes/notifications');

class NexusNodeManager {
  constructor() {
    this.app = express();
    this.server = null;
    this.wss = null;
    
    // –°–µ—Ä–≤–∏—Å—ã
    this.db = new Database();
    this.nexusCLI = new NexusCLI();
    this.nexusDocker = new NexusDocker();
    this.nexusRPC = new NexusRPC();
    this.systemMonitor = new SystemMonitor();
    
    // WebSocket –∫–ª–∏–µ–Ω—Ç—ã
    this.wsClients = new Set();
  }

  async init() {
    try {
      console.log('üöÄ Starting Nexus Node Manager...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.initDatabase();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
      this.setupExpress();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–æ–≤
      this.setupRoutes();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
      this.server = http.createServer(this.app);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
      this.setupWebSocket();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
      await this.initServices();
      
      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      await this.startServer();
      
      console.log('‚úÖ Nexus Node Manager started successfully!');
      
    } catch (error) {
      console.error('‚ùå Failed to start server:', error);
      process.exit(1);
    }
  }

  async initDatabase() {
    console.log('üì¶ Initializing database...');
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const migration = new DatabaseMigration();
    await migration.init();
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Docker –º–∏–≥—Ä–∞—Ü–∏–π
    const dockerMigration = new DockerMigration();
    await dockerMigration.init();
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.db.connect();
    
    console.log('‚úÖ Database initialized');
  }

  setupExpress() {
    console.log('‚öôÔ∏è  Setting up Express middleware...');
    
    // Trust proxy –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ Nginx
    this.app.set('trust proxy', 1);
    
    // –ë–∞–∑–æ–≤–æ–µ middleware
    this.app.use(helmet());
    this.app.use(cors({
      origin: config.security.corsOrigins,
      credentials: true
    }));
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.app.use(morgan('combined'));
    
    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true }));
    
    // Rate limiting
    const limiter = rateLimit({
      windowMs: config.security.rateLimitWindow * 60 * 1000,
      max: config.security.rateLimitMaxRequests,
      message: 'Too many requests from this IP'
    });
    this.app.use('/api/', limiter);
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    this.app.use('/static', express.static(path.join(__dirname, '../../public')));
    
    console.log('‚úÖ Express middleware configured');
  }

  setupRoutes() {
    console.log('üõ£Ô∏è  Setting up routes...');
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–æ—É—Ç—ã
    this.app.use((req, res, next) => {
      req.db = this.db;
      req.nexusCLI = this.nexusCLI;
      req.nexusDocker = this.nexusDocker;
      req.nexusRPC = this.nexusRPC;
      req.systemMonitor = this.systemMonitor;
      req.wsClients = this.wsClients;
      next();
    });
    
    // API —Ä–æ—É—Ç—ã
    this.app.use('/api/nodes', nodeRoutes);
    this.app.use('/api/docker', dockerRoutes);
    this.app.use('/api/metrics', metricsRoutes);
    this.app.use('/api/system', systemRoutes);
    this.app.use('/api/notifications', notificationRoutes);
    
    // –ë–∞–∑–æ–≤—ã–π API —Ä–æ—É—Ç
    this.app.get('/api/', (req, res) => {
      res.json({
        message: 'Nexus Node Manager API',
        version: '1.0.0',
        status: 'running',
        endpoints: {
          nodes: '/api/nodes',
          docker: '/api/docker',
          metrics: '/api/metrics',
          system: '/api/system',
          notifications: '/api/notifications',
          health: '/health'
        },
        timestamp: new Date().toISOString()
      });
    });
    
    // –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
    this.app.get('/', (req, res) => {
      res.json({
        message: 'Nexus Node Manager API',
        version: '1.0.0',
        status: 'running',
        timestamp: new Date().toISOString()
      });
    });
    
    this.app.get('/health', async (req, res) => {
      try {
        const health = await this.checkHealth();
        res.json(health);
      } catch (error) {
        res.status(500).json({
          status: 'error',
          message: error.message
        });
      }
    });
    
    // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    this.app.use('*', (req, res) => {
      res.status(404).json({
        error: 'Not Found',
        message: 'The requested resource was not found'
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.app.use((err, req, res, next) => {
      console.error('‚ùå Express error:', err);
      res.status(500).json({
        error: 'Internal Server Error',
        message: config.nodeEnv === 'development' ? err.message : 'Something went wrong'
      });
    });
    
    console.log('‚úÖ Routes configured');
  }

  setupWebSocket() {
    console.log('üîå Setting up WebSocket...');
    
    this.wss = new WebSocket.Server({ server: this.server });
    
    this.wss.on('connection', (ws, req) => {
      console.log('üîó New WebSocket client connected');
      
      this.wsClients.add(ws);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      ws.send(JSON.stringify({
        type: 'connection',
        message: 'Connected to Nexus Node Manager',
        timestamp: new Date().toISOString()
      }));
      
      ws.on('message', (message) => {
        try {
          const data = JSON.parse(message);
          this.handleWebSocketMessage(ws, data);
        } catch (error) {
          console.error('‚ùå WebSocket message error:', error);
        }
      });
      
      ws.on('close', () => {
        console.log('üì™ WebSocket client disconnected');
        this.wsClients.delete(ws);
      });
      
      ws.on('error', (error) => {
        console.error('‚ùå WebSocket error:', error);
        this.wsClients.delete(ws);
      });
    });
    
    console.log('‚úÖ WebSocket configured');
  }

  handleWebSocketMessage(ws, data) {
    switch (data.type) {
      case 'ping':
        ws.send(JSON.stringify({
          type: 'pong',
          timestamp: new Date().toISOString()
        }));
        break;
      
      case 'subscribe':
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (data.events) {
          ws.subscribedEvents = data.events;
        }
        break;
      
      default:
        console.warn('ü§î Unknown WebSocket message type:', data.type);
    }
  }

  async initServices() {
    console.log('üîß Initializing services...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Nexus RPC
    await this.nexusRPC.connectWebSocket();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.setupEventHandlers();
    
    // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.systemMonitor.start();
    
    console.log('‚úÖ Services initialized');
  }

  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    this.nexusRPC.on('newBlock', (blockData) => {
      this.broadcastToClients({
        type: 'newBlock',
        data: blockData,
        timestamp: new Date().toISOString()
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    this.systemMonitor.subscribe('metrics', (metrics) => {
      this.broadcastToClients({
        type: 'systemMetrics',
        data: metrics,
        timestamp: new Date().toISOString()
      });
    });
  }

  broadcastToClients(message) {
    const messageStr = JSON.stringify(message);
    
    this.wsClients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        if (!client.subscribedEvents || client.subscribedEvents.includes(message.type)) {
          client.send(messageStr);
        }
      }
    });
  }

  async startServer() {
    return new Promise((resolve, reject) => {
      this.server.listen(config.port, (err) => {
        if (err) {
          reject(err);
        } else {
          console.log(`üåê Server running on port ${config.port}`);
          console.log(`üì° WebSocket server ready`);
          resolve();
        }
      });
    });
  }

  async checkHealth() {
    const [cliHealth, rpcHealth, systemHealth] = await Promise.all([
      this.nexusCLI.checkCLIAvailability(),
      this.nexusRPC.checkConnection(),
      this.systemMonitor.checkSystemHealth()
    ]);
    
    return {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      services: {
        nexusCLI: cliHealth,
        nexusRPC: rpcHealth,
        systemMonitor: systemHealth,
        database: { connected: true },
        webSocket: { 
          connected: true,
          clients: this.wsClients.size
        }
      }
    };
  }

  async shutdown() {
    console.log('üõë Shutting down server...');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.wsClients.forEach(client => {
      client.close();
    });
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    this.systemMonitor.cleanup();
    this.nexusRPC.disconnect();
    this.nexusCLI.cleanup();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await this.db.close();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    if (this.server) {
      this.server.close();
    }
    
    console.log('‚úÖ Server shutdown complete');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new NexusNodeManager();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', async () => {
  console.log('üì• Received SIGTERM');
  await app.shutdown();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üì• Received SIGINT');
  await app.shutdown();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.init().catch(console.error);

module.exports = app; 