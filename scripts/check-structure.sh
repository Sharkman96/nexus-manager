#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ Nexus Node Manager
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∏ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "\n${BLUE}==== $1 ====${NC}"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT=""
if [ -d "backend" ] && [ -d "frontend" ]; then
    PROJECT_ROOT="$(pwd)"
elif [ -d "../backend" ] && [ -d "../frontend" ]; then
    PROJECT_ROOT="$(cd .. && pwd)"
else
    print_error "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
    print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ scripts/"
    exit 1
fi

print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"
print_info "–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $PROJECT_ROOT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

REQUIRED_DIRS=(
    "backend"
    "frontend"
    "database"
    "nexus-docker"
    "scripts"
)

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$PROJECT_ROOT/$dir" ]; then
        print_status "‚úì $dir/"
    else
        print_error "‚úó $dir/ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ backend —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"

BACKEND_DIRS=(
    "backend/src"
    "backend/src/database"
    "backend/src/routes"
    "backend/src/services"
    "backend/logs"
)

for dir in "${BACKEND_DIRS[@]}"; do
    if [ -d "$PROJECT_ROOT/$dir" ]; then
        print_status "‚úì $dir/"
    else
        print_error "‚úó $dir/ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"

FRONTEND_DIRS=(
    "frontend/src"
    "frontend/src/components"
    "frontend/src/pages"
    "frontend/src/contexts"
    "frontend/src/utils"
    "frontend/public"
)

for dir in "${FRONTEND_DIRS[@]}"; do
    if [ -d "$PROJECT_ROOT/$dir" ]; then
        print_status "‚úì $dir/"
    else
        print_error "‚úó $dir/ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"

IMPORTANT_FILES=(
    "backend/package.json"
    "backend/server.js"
    "backend/config.js"
    "backend/env.example"
    "frontend/package.json"
    "database/schema.sql"
    "scripts/setup.sh"
    "scripts/ubuntu-install.sh"
    "README.md"
)

for file in "${IMPORTANT_FILES[@]}"; do
    if [ -f "$PROJECT_ROOT/$file" ]; then
        print_status "‚úì $file"
    else
        print_error "‚úó $file (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

if [ -f "$PROJECT_ROOT/backend/.env" ]; then
    print_status "‚úì backend/.env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –≤ .env
    cd "$PROJECT_ROOT/backend"
    
    if grep -q "DB_PATH=../database/nexus-nodes.db" .env; then
        print_status "‚úì DB_PATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    else
        print_warning "‚ö†Ô∏è DB_PATH –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    fi
    
    if grep -q "NEXUS_DOCKER_DATA_DIR=../nexus-docker" .env; then
        print_status "‚úì NEXUS_DOCKER_DATA_DIR –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    else
        print_warning "‚ö†Ô∏è NEXUS_DOCKER_DATA_DIR –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    fi
    
    if grep -q "LOG_FILE=./logs/nexus-manager.log" .env; then
        print_status "‚úì LOG_FILE –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    else
        print_warning "‚ö†Ô∏è LOG_FILE –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    fi
    
    cd "$PROJECT_ROOT"
else
    print_warning "‚ö†Ô∏è backend/.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Å–æ–∑–¥–∞–π—Ç–µ –∏–∑ env.example)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WRITABLE_DIRS=(
    "database"
    "nexus-docker"
    "backend/logs"
)

for dir in "${WRITABLE_DIRS[@]}"; do
    if [ -w "$PROJECT_ROOT/$dir" ]; then
        print_status "‚úì $dir/ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏"
    else
        print_error "‚úó $dir/ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

if [ -f "$PROJECT_ROOT/database/nexus-nodes.db" ]; then
    print_status "‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_SIZE=$(stat -c%s "$PROJECT_ROOT/database/nexus-nodes.db")
    if [ "$DB_SIZE" -gt 0 ]; then
        print_status "‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—É—Å—Ç–∞—è ($DB_SIZE –±–∞–π—Ç)"
    else
        print_warning "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è"
    fi
else
    print_warning "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤"

if [ -d "$PROJECT_ROOT/nexus-docker" ]; then
    DOCKER_FILES=$(find "$PROJECT_ROOT/nexus-docker" -name "*.yml" -o -name "Dockerfile" | wc -l)
    if [ "$DOCKER_FILES" -gt 0 ]; then
        print_status "‚úì –ù–∞–π–¥–µ–Ω–æ $DOCKER_FILES Docker —Ñ–∞–π–ª–æ–≤"
    else
        print_info "‚ÑπÔ∏è Docker —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"

if [ -d "$PROJECT_ROOT/backend/node_modules" ]; then
    print_status "‚úì Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    print_warning "‚ö†Ô∏è Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ npm install)"
fi

if [ -d "$PROJECT_ROOT/frontend/node_modules" ]; then
    print_status "‚úì Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    print_warning "‚ö†Ô∏è Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ npm install)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 3002 (backend)
if netstat -tlnp 2>/dev/null | grep -q ":3002"; then
    print_warning "‚ö†Ô∏è –ü–æ—Ä—Ç 3002 –∑–∞–Ω—è—Ç (–≤–æ–∑–º–æ–∂–Ω–æ backend —É–∂–µ –∑–∞–ø—É—â–µ–Ω)"
else
    print_status "‚úì –ü–æ—Ä—Ç 3002 —Å–≤–æ–±–æ–¥–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 3000 (frontend)
if netstat -tlnp 2>/dev/null | grep -q ":3000"; then
    print_warning "‚ö†Ô∏è –ü–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç (–≤–æ–∑–º–æ–∂–Ω–æ frontend —É–∂–µ –∑–∞–ø—É—â–µ–Ω)"
else
    print_status "‚úì –ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"

if command -v docker &> /dev/null; then
    print_status "‚úì Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
    
    if command -v docker-compose &> /dev/null; then
        print_status "‚úì Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version)"
    else
        print_warning "‚ö†Ô∏è Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if docker info &> /dev/null; then
        print_status "‚úì Docker –¥–µ–º–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "‚úó Docker –¥–µ–º–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
else
    print_warning "‚ö†Ô∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js"

if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_status "‚úì Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    NODE_MAJOR=$(echo $NODE_VERSION | cut -d'.' -f1 | cut -d'v' -f2)
    if [ "$NODE_MAJOR" -ge 16 ]; then
        print_status "‚úì –í–µ—Ä—Å–∏—è Node.js –ø–æ–¥—Ö–æ–¥—è—â–∞—è (>= 16)"
    else
        print_error "‚úó –í–µ—Ä—Å–∏—è Node.js —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–Ω—É–∂–Ω–∞ >= 16)"
    fi
else
    print_error "‚úó Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
if command -v npm &> /dev/null; then
    print_status "‚úì npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(npm --version)"
else
    print_error "‚úó npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
print_header "–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞"

echo -e "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:"
echo -e "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ Backend —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ Frontend —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ Docker —Ñ–∞–π–ª—ã: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${YELLOW}‚ö†Ô∏è${NC} (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É)"
echo -e "‚Ä¢ –ü–æ—Ä—Ç—ã: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ Docker: ${GREEN}‚úì${NC}"
echo -e "‚Ä¢ Node.js: ${GREEN}‚úì${NC}"

print_header "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

if [ ! -f "$PROJECT_ROOT/backend/.env" ]; then
    echo -e "1. ${YELLOW}–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª:${NC}"
    echo -e "   cd backend && cp env.example .env"
fi

if [ ! -d "$PROJECT_ROOT/backend/node_modules" ]; then
    echo -e "2. ${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:${NC}"
    echo -e "   cd backend && npm install"
fi

if [ ! -d "$PROJECT_ROOT/frontend/node_modules" ]; then
    echo -e "3. ${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:${NC}"
    echo -e "   cd frontend && npm install"
fi

if [ ! -f "$PROJECT_ROOT/database/nexus-nodes.db" ]; then
    echo -e "4. ${YELLOW}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:${NC}"
    echo -e "   cd backend && npm run db:migrate"
fi

echo -e "\n${GREEN}üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}" 